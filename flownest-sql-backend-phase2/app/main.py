from fastapi import FastAPI, HTTPException
from app.schemas import (  # âœ… absolute package import

    SQLTuneRequest, SQLTuneResponse,
    SchemaOptimizationRequest, SchemaOptimizationResponse,
    PlanOptimizationRequest, PlanOptimizationResponse
)
import os
import requests

app = FastAPI(
    title="FlownestAI SQL Optimization API",
    description="API for SQL query tuning, schema optimization, and execution plan analysis",
    version="1.0.0"
)

# Load environment variables
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "openai/gpt-3.5-turbo"

if not OPENROUTER_API_KEY:
    raise RuntimeError("OPENROUTER_API_KEY is not set in environment variables")

def call_openrouter_api(prompt: str) -> str:
    """Helper to send prompt to OpenRouter and return response text."""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "You are a helpful SQL optimization assistant."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post(OPENROUTER_URL, headers=headers, json=payload)
    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail=response.text)
    return response.json()["choices"][0]["message"]["content"]


@app.get("/")
def root():
    return {"message": "FlownestAI SQL Optimization API is running"}


@app.post("/tune-sql/", response_model=SQLTuneResponse)
def tune_sql(request: SQLTuneRequest):
    prompt = f"Optimize this SQL query and explain improvements:\n{request.sql_query}"
    result = call_openrouter_api(prompt)

    return SQLTuneResponse(
        optimized_query=result.strip(),
        explanation="Optimization generated by AI model"
    )


@app.post("/optimize-schema/", response_model=SchemaOptimizationResponse)
def optimize_schema(request: SchemaOptimizationRequest):
    prompt = (
        f"Analyze and optimize this database schema:\n"
        f"Description: {request.schema_description}\n"
        f"Tables: {request.tables}"
    )
    result = call_openrouter_api(prompt)
    return SchemaOptimizationResponse(suggestions=result.strip())


@app.post("/optimize-plan/", response_model=PlanOptimizationResponse)
def optimize_plan(request: PlanOptimizationRequest):
    prompt = f"Analyze this SQL execution plan and provide optimization suggestions:\n{request.execution_plan}"
    result = call_openrouter_api(prompt)
    return PlanOptimizationResponse(suggestions=result.strip())
